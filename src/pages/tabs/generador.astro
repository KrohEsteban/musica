---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="üé∏ Generador de Tabs (Ukelele)">
  <div class="generator-container">
    <h1>üé∏ Generador de Tabs (Ukelele)</h1>
    <p class="hint">Convierte entre notaci√≥n r√°pida y tablatura para ukelele (A‚ÄìE‚ÄìC‚ÄìG).</p>

      <div class="card">
        <p class="hint"><strong>Reglas:</strong></p>
        <ul class="hint">
          <li>Columnas separadas por espacio (cada columna = 1 tiempo).</li>
          <li>Notas: <code>G0</code>, <code>C2</code>, <code>E3</code>, <code>A10</code> &nbsp;|&nbsp; Silencios: <code>G-</code> o <code>-</code> o <code>Gx</code> o <code>Gmute</code>, etc.</li>
          <li>Acordes: unir con <code>+</code>, p.ej. <code>G0+E0</code>, <code>C2+E3+A3</code>.</li>
          <li>Salida en orden <strong>A, E, C, G</strong> con ancho por columna seg√∫n el traste m√°s largo.</li>
          <li><strong>M√∫ltiples l√≠neas:</strong> Cada l√≠nea genera una tab separada.</li>
        </ul>

        <textarea id="input" placeholder="Ej.:&#10;G0 C2 E0 E2 E3 E2 E0&#10;A0 A2 Ax+Ex+Cx+Gx A3 A2 A0&#10;G0+E0 C2+E2 G0+E0"></textarea>

        <div class="row">
          <button id="btn-gen">Generar</button>
          <button id="btn-sample">Cargar ejemplo</button>
        </div>

        <div class="output" id="outbox" hidden>
          <pre id="output"></pre>
          <div class="toolbar">
            <button id="btn-copy">Copiar</button>
            <button id="btn-download">Descargar .txt</button>
          </div>
        </div>
      </div>

      <!-- Segundo generador: Tablatura a Notaci√≥n R√°pida -->
      <div class="card">
        <h2>üîÑ Tablatura ‚Üí Notaci√≥n R√°pida</h2>
        <p class="hint">Peg√° una tablatura y convertila a notaci√≥n r√°pida.</p>

        <p class="hint"><strong>Formato de entrada:</strong></p>
        <ul class="hint">
          <li>Peg√° la tablatura completa (4 l√≠neas: A, E, C, G)</li>
          <li>Formato: <code>A|-0-2-0-2-3-2-0-|</code></li>
          <li><strong>M√∫ltiples l√≠neas:</strong> Cada tablatura genera una linea de notaci√≥n separada.</li>
        </ul>

        <textarea id="input-tab" placeholder="Peg√° aqu√≠ la tablatura:&#10;A|-------------|&#10;E|----0-2-3-2-0|&#10;C|--2----------|&#10;G|0------------|"></textarea>

        <div class="row">
          <button id="btn-gen-tab">Convertir</button>
          <button id="btn-sample-tab">Cargar ejemplo</button>
        </div>

        <div class="output" id="outbox-tab" hidden>
          <pre id="output-tab"></pre>
          <div class="toolbar">
            <button id="btn-copy-tab">Copiar</button>
            <button id="btn-download-tab">Descargar .txt</button>
          </div>
        </div>
      </div>
  </div>
</Layout>

<style>
  .generator-container {
    max-width: 820px;
    margin: 0 auto;
    padding: 0 16px 48px;
  }

  .generator-container h1 {
    font-size: 1.6rem;
    margin: 0 0 8px;
  }

  .generator-container .hint {
    color: #666;
    margin: 0 0 16px;
    font-size: .9rem;
  }

  .card {
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 16px;
    background: #f8f9fa;
    margin: 1rem 0;
  }

  .card textarea {
    width: calc(100% - 24px);
    min-height: 140px;
    resize: vertical;
    border-radius: 10px;
    border: 1px solid #e9ecef;
    background: white;
    color: #333;
    padding: 12px;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
    line-height: 1.35;
    box-sizing: border-box;
  }

  .row {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin: 12px 0 8px;
  }

  .card button {
    background: transparent;
    color: #333;
    border: 1px solid #e9ecef;
    border-radius: 10px;
    padding: 8px 12px;
    cursor: pointer;
    transition: border-color 0.3s ease;
  }

  .card button:hover {
    border-color: #3498db;
  }

  .output {
    position: relative;
    margin-top: 12px;
    border: 1px solid #e9ecef;
    border-radius: 10px;
    background: white;
    padding: 12px;
  }

  .output pre {
    margin: 0;
    white-space: pre;
    overflow: auto;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
    line-height: 1.2;
    color: #333;
    font-size: 0.9rem;
  }

  .toolbar {
    display: flex;
    gap: 8px;
    justify-content: flex-end;
    margin-top: 8px;
  }

  .card code {
    background: #f1f3f4;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 2px 6px;
    color: #333;
  }

  .card ul {
    margin: 0 0 12px 1.2rem;
  }

  .card ul li {
    color: #666;
  }
</style>

<script>
      // Orden de impresi√≥n (A, E, C, G)
      const ORDER = ["A","E","C","G"];
      const STRINGS = new Set(["G","C","E","A"]);

      const $ = (id) => document.getElementById(id);

      // Primer generador (Notaci√≥n ‚Üí Tablatura)
      const $input = $("input");
      const $gen = $("btn-gen");
      const $sample = $("btn-sample");
      const $outbox = $("outbox");
      const $out = $("output");
      const $copy = $("btn-copy");
      const $dl = $("btn-download");

      // Segundo generador (Tablatura ‚Üí Notaci√≥n)
      const $inputTab = $("input-tab");
      const $genTab = $("btn-gen-tab");
      const $sampleTab = $("btn-sample-tab");
      const $outboxTab = $("outbox-tab");
      const $outTab = $("output-tab");
      const $copyTab = $("btn-copy-tab");
      const $dlTab = $("btn-download-tab");

      const SAMPLE = "G0 C2 E0 E2 E3 E2 E0\n\nA0 A2 Ax+Ex+Cx+Gx A3 A2 A0\n\nG0+E0 C2+E2 G0+E0";

      const SAMPLE_TAB = `A|-------------|
E|----0-2-3-2-0|
C|--2----------|
G|0------------|

A|0-2-x-3-2-0|
E|----x------|
C|----x------|
G|----x------|

A|-----|
E|0-2-0|
C|--2--|
G|0---0|`;

      function parseColumns(text) {
        // Dividir por l√≠neas primero
        const lines = text.trim().split('\n');

        return lines.map(line =>
          line.trim()
            .split(/\s+/)              // separa columnas por espacio
            .filter(Boolean)
            .map(col => col.split("+")  // acordes con '+'
              .map(tok => tok.trim())
              .filter(Boolean)
            )
        );
      }

      function colWidth(tokens) {
        let maxLen = 1;
        for (const t of tokens) {
          const m = t.match(/^([GCEA])(.+)$/i);
          if (!m) continue;
          const fret = m[2];
          if (fret !== "-") maxLen = Math.max(maxLen, String(fret).length);
        }
        return maxLen;
      }

      function renderTab(linesOfColumns) {
        const result = [];

        for (const columns of linesOfColumns) {
          if (columns.length === 0) {
            // L√≠nea vac√≠a
            result.push('');
            continue;
          }

          const lines = Object.fromEntries(ORDER.map(s => [s, []]));

          for (const colTokens of columns) {
            const width = Math.max(1, colWidth(colTokens));
            const cell = Object.fromEntries(ORDER.map(s => [s, "-".repeat(width)]));

            for (const tok of colTokens) {
              const m = tok.match(/^([GCEA])(.+)$/i);
              if (!m) continue;
              let [, s, fret] = m;
              s = s.toUpperCase();
              if (!STRINGS.has(s)) continue;
              if (fret === "-") continue;

              const text = String(fret);
              const padLeft = Math.floor((width - text.length) / 2);
              const padRight = width - text.length - padLeft;
              cell[s] = "-".repeat(padLeft) + text + "-".repeat(padRight);
            }

            for (const s of ORDER) (lines as any)[s].push(cell[s]);
          }

                    // Agregar las 4 l√≠neas de esta tab
          result.push(...ORDER.map(s => `${s}|${(lines as any)[s].join("-")}|`));
        }

        return result.join("\n");
      }

            // Funciones para el segundo generador (Tablatura ‚Üí Notaci√≥n)
      function parseTab(tabText) {
        const lines = tabText.trim().split('\n');
        const tabs = [];
        let currentTab = {};

        for (const line of lines) {
          if (line.trim() === '') {
            // L√≠nea vac√≠a - terminar tablatura actual y empezar nueva
            if (Object.keys(currentTab).length > 0) {
              tabs.push(currentTab);
              currentTab = {};
            }
            continue;
          }

          const match = line.match(/^([AECG])\|(.+)\|$/);
          if (match) {
            const [, string, content] = match;
            currentTab[string] = content;
          }
        }

        // Agregar la √∫ltima tablatura si existe
        if (Object.keys(currentTab).length > 0) {
          tabs.push(currentTab);
        }

        return tabs;
      }

      function tabToNotation(tabLines) {
        const result = [];
        const maxLength = Math.max(...Object.values(tabLines).map(line => line.length));

        // Procesar columna por columna
        for (let col = 0; col < maxLength; col++) {
          const column = [];

          for (const string of ORDER) {
            const line = tabLines[string] || '';
            const char = line[col] || '-';

            if (char !== '-') {
              column.push(`${string}${char}`);
            }
          }

          if (column.length > 0) {
            result.push(column.join('+'));
          }
        }

        return result.join(' ');
      }

      function tabsToNotation(tabs) {
        return tabs.map(tab => tabToNotation(tab)).join('\n\n');
      }

      function generateTab() {
        if (!$inputTab) return;
        const raw = ($inputTab as HTMLTextAreaElement).value;
        if (!raw.trim()) {
          if ($outboxTab) $outboxTab.hidden = true;
          return;
        }

        const tabs = parseTab(raw);
        const output = tabsToNotation(tabs);

        if ($outTab) $outTab.textContent = output;
        if ($outboxTab) $outboxTab.hidden = false;
      }

      function copyOutTab() {
        if (!$outTab) return;
        const txt = $outTab.textContent || "";
        if (!txt) return;
        navigator.clipboard.writeText(txt).then(() => {
          if (!$copyTab) return;
          const prev = $copyTab.textContent;
          $copyTab.textContent = "¬°Copiado!";
          setTimeout(() => {
            if ($copyTab) $copyTab.textContent = prev;
          }, 800);
        });
      }

      function downloadOutTab() {
        if (!$outTab) return;
        const txt = $outTab.textContent || "";
        if (!txt) return;
        const blob = new Blob([txt], { type: "text/plain;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url; a.download = "ukulele-notation.txt";
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      }

      function generate() {
        if (!$input) return;
        const raw = ($input as HTMLTextAreaElement).value;
        if (!raw.trim()) {
          if ($outbox) $outbox.hidden = true;
          return;
        }

        const cols = parseColumns(raw);
        const output = renderTab(cols);

        if ($out) $out.textContent = output;
        if ($outbox) $outbox.hidden = false;
      }

      function copyOut() {
        if (!$out) return;
        const txt = $out.textContent || "";
        if (!txt) return;
        navigator.clipboard.writeText(txt).then(() => {
          if (!$copy) return;
          const prev = $copy.textContent;
          $copy.textContent = "¬°Copiado!";
          setTimeout(() => {
            if ($copy) $copy.textContent = prev;
          }, 800);
        });
      }

      function downloadOut() {
        if (!$out) return;
        const txt = $out.textContent || "";
        if (!txt) return;
        const blob = new Blob([txt], { type: "text/plain;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url; a.download = "ukulele-tab.txt";
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      }

      // Event listeners para el primer generador
      if ($gen) $gen.addEventListener("click", generate);
      if ($sample) $sample.addEventListener("click", () => {
        if ($input) {
          ($input as HTMLTextAreaElement).value = SAMPLE;
          generate();
        }
      });
      if ($copy) $copy.addEventListener("click", copyOut);
      if ($dl) $dl.addEventListener("click", downloadOut);

      // Event listeners para el segundo generador
      if ($genTab) $genTab.addEventListener("click", generateTab);
      if ($sampleTab) $sampleTab.addEventListener("click", () => {
        if ($inputTab) {
          ($inputTab as HTMLTextAreaElement).value = SAMPLE_TAB;
          generateTab();
        }
      });
      if ($copyTab) $copyTab.addEventListener("click", copyOutTab);
      if ($dlTab) $dlTab.addEventListener("click", downloadOutTab);

      // Autogenerar si ya hay texto (p.ej. hot-reload)
      if ($input && ($input as HTMLTextAreaElement).value.trim()) generate();
      if ($inputTab && ($inputTab as HTMLTextAreaElement).value.trim()) generateTab();
    </script>
  </body>
</html>
